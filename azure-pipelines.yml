name: Week08-Docker

trigger:
- main
#- feature/*

pool: Docker

variables:
  containerSrvReg: weight-app-repo
  imageRepository: weightapprepo
  containerRegLogin: ben1213test.azurecr.io

stages:

# Continuous Integration Process
- stage: CI
  jobs:
  - job: BuildAndPushDocker
    workspace: 
      clean: all
    steps:
      - task: Docker@2
        inputs:
          containerRegistry: $(containerSrvReg)
          repository: 'weightapprepo'
          command: 'buildAndPush'
          Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'

# Continuous Deployment Process for Staging Environment
- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: staging
    displayName: Deploy to Staging
    environment:
      name: staging
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            inputs:
              script: |
                sudo apt update
                sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
                apt-cache policy docker-ce
                sudo apt install docker-ce -y
                sudo usermod -aG docker ubuntu
                sudo chmod 666 /var/run/docker.sock
                sudo chown ubuntu:docker /var/run/docker.sock
          
          - task: DockerInstaller@0
            displayName: 'Install Docker 17.09.0-ce'
          
          - task: CmdLine@2
            displayName: Stop Current Container
            inputs:
              script: 'docker rm -f weight-app || true'
          - task: Docker@2
            displayName: 'Login to Registry'
            inputs:
              containerRegistry: $(containerSrvReg)
              command: 'login'

          - task: CmdLine@2
            displayName: Pull image
            inputs:
              script: ' docker pull $(containerRegLogin)/$(imageRepository):$(Build.BuildId)'

          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'docker run --restart=always  -d --name weight-app -p 8080:8080 -e PGHOST=$(SPGHOST)   -e PORT=8080    -e  HOST=''0.0.0.0''  -e PGUSERNAME=$(SPGUSER)  -e PGDATABASE=postgres  -e  PGPASSWORD=$(SPGPASS)  -e  PGPORT=5432   -e HOST_URL=$(SHOST_URL)   -e COOKIE_ENCRYPT_PWD=$(SCOOKIE)  -e  NODE_ENV=development  -e  OKTA_ORG_URL=$(SOKTA_ORG)   -e  OKTA_CLIENT_ID=$(SOKTA_CLIENT)   -e OKTA_CLIENT_SECRET=$(SOKTA_SECRET)  $(containerRegLogin)/$(imageRepository):$(Build.BuildId)'

# Continuous Delivery Process for Production Environment
- stage: DeployToProduction
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: production
    displayName: Deploy to Production
    environment:
      name: production
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            inputs:
              script: |
                sudo apt update
                sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
                apt-cache policy docker-ce
                sudo apt install docker-ce -y
                sudo usermod -aG docker ubuntu
                sudo chmod 666 /var/run/docker.sock
                sudo chown ubuntu:docker /var/run/docker.sock
          
          - task: DockerInstaller@0
            displayName: 'Install Docker 17.09.0-ce'
          
          - task: CmdLine@2
            displayName: Stop Current Container
            inputs:
              script: 'docker rm -f weight-app || true'
          - task: Docker@2
            displayName: 'Login to Registry'
            inputs:
              containerRegistry: $(containerSrvReg)
              command: 'login'

          - task: CmdLine@2
            displayName: Pull image
            inputs:
              script: ' docker pull $(containerRegLogin)/$(imageRepository):$(Build.BuildId)'

          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'docker run --restart=always  -d --name weight-app -p 8080:8080 -e PGHOST=$(PPGHOST)   -e PORT=8080    -e  HOST=''0.0.0.0''  -e PGUSERNAME=$(PPGUSER)  -e PGDATABASE=postgres  -e  PGPASSWORD=$(PPGPASS)  -e  PGPORT=5432   -e HOST_URL=$(PHOST_URL)   -e COOKIE_ENCRYPT_PWD=$(SCOOKIE)  -e  NODE_ENV=development  -e  OKTA_ORG_URL=$(POKTA_ORG)   -e  OKTA_CLIENT_ID=$(POKTA_CLIENT)   -e OKTA_CLIENT_SECRET=$(POKTA_SECRET)  $(containerRegLogin)/$(imageRepository):$(Build.BuildId)'
